/*
 *  bench.jc
 *
 *  Perform simple benchmarks with and without code optimization
 */

option "stack-size=16000";  // needed for ackerman

import runtime;
import stdlib;
import time;

using runtime, stdlib, time;

/*** Disable optimizations ***/

option "optimize=0, stack-locals=no";

/*** ack ***/

function int ack(int M, int N)
{
    if (!M)
        return ++N;
    if (!N)
        return ack(--M, 1);
    return ack(M-1, ack(M, --N));
}

/*** fib ***/

function int fib(int n)
{
    if (n < 2)
        return n;
    return fib(n-1) + fib(n-2);
}

/*** bench ***/

function int bench()
{
    int n=18;
    int x=0;
    for (int a=0;a<n;a++)
    {
        for (int b=0;b<n;b++)
        {
            for (int c=0;c<n;c++)
            {
                for (int d=0;d<n;d++)
                {
                    for (int e=0;e<n;e++)
                    {
                        for (int f=0;f<n;f++)
                        {
                            x++;
                        }
                    }
                }
            }
        }
    }
    return x;
}

/*** Enable optimizations ***/

option "optimize=3";

/*** ack ***/

function int ack_o(int M, int N)
{
    if (!M)
        return ++N;
    if (!N)
        return ack_o(--M, 1);
    return ack_o(M-1, ack_o(M, --N));
}

/*** fib ***/

function int fib_o(int n)
{
    if (n < 2)
        return n;
    return fib_o(n-1) + fib_o(n-2);
}

/*** bench ***/

function int bench_o()
{
    int n=18;
    int x=0;
    for (int a=0;a<n;a++)
    {
        for (int b=0;b<n;b++)
        {
            for (int c=0;c<n;c++)
            {
                for (int d=0;d<n;d++)
                {
                    for (int e=0;e<n;e++)
                    {
                        for (int f=0;f<n;f++)
                        {
                            x++;
                        }
                    }
                }
            }
        }
    }
    return x;
}

/*** main ***/

function string main(const string[] args)
{
    time t, u;

    u.tickDiff();
    float ictr1 = instructionCounter();

    print("*** ACKERMAN ***\n");
    t.tickDiff();
    printf("ack(3,8) = %d\n", ack(3,8));
    printf("Normal: %g s\n", t.tickDiff() / 1000.0);
    printf("ack(3,8) = %d\n", ack_o(3,8));
    printf("Optimized: %g s\n", t.tickDiff() / 1000.0);

    print("\n*** FIB ***\n");
    t.tickDiff();
    printf("fib(32) = %d\n", fib(32));
    printf("Normal: %g s\n", t.tickDiff() / 1000.0);
    printf("fib(32) = %d\n", fib_o(32));
    printf("Optimized: %g s\n", t.tickDiff() / 1000.0);

    print("\n*** 6 TIMES NESTED FOR TEST (18 iterations each) ***\n");
    t.tickDiff();
    printf("bench() = %d\n", bench());
    printf("Normal: %g s\n", t.tickDiff() / 1000.0);
    printf("bench() = %d\n", bench_o());
    printf("Optimized: %g s\n", t.tickDiff() / 1000.0);

    float ictr2 = instructionCounter();
    float dur = u.tickDiff();
    float vmips = (ictr2 - ictr1) * (1000.0 / dur) / 1000000.0;
    printf("\nVM speed on this machine is approximately %.2f bogoMIPS\n", vmips);

    return "";
}
