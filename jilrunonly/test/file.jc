/*
 *  file.jc
 *
 *  A script myFile for testing the file object.
 */

import stdlib;
import file;

using stdlib;   // get rid of stdlib namespace

function string main(const string[] args)
{
    file myFile;

    printf( "* Setting file specifier to: %s\n", args[0] );
    myFile.fileSpec = args[0];

    printf( "myFile.path returns: %s\n", myFile.path );
    printf( "myFile.name returns: %s\n", myFile.name );
    printf( "myFile.type returns: %s\n", myFile.type );
    printf( "myFile.fileSpec returns: %s\n", myFile.fileSpec );

    print( "* Setting mode to read, text\n");
    myFile.mode = file::kRead;

    printf( "myFile.exists() returns: %d\n", myFile.exists() );

    print("* Trying to open file and read one text line\n");
    string text = "";
    if( !myFile.open() )
    {
        text = myFile.readTextLine();
        printf( "myFile.readTextLine() returns: %s\n", text );
        print("* Read a second text line\n");
        text = myFile.readTextLine();
        printf( "myFile.readTextLine() returns: %s\n", text );
        print("* Read the entire remaining text file into a string\n");
        text = myFile.readText();
        printf( "myFile.readText() returns: %d characters\n", text.length );
        myFile.close();
    }
    print("* Making a copy of the file object\n");
    file newFile = new file(myFile);

    print("* Setting file type of newFile to '.txt'\n");
    newFile.type = "txt";

    printf( "newFile.path returns: %s\n", newFile.path );
    printf( "newFile.name returns: %s\n", newFile.name );
    printf( "newFile.type returns: %s\n", newFile.type );
    printf( "newFile.fileSpec returns: %s\n", newFile.fileSpec );
    printf( "newFile.exists() returns: %d\n", newFile.exists());

    print("* Setting mode of newFile to write, text\n");
    newFile.mode = file::kWrite;

    print("* Trying to open newFile and write a text line\n");
    if( !newFile.open() )
    {
        if( newFile.writeTextLine("This is what we read from "+args[0]+".\n") )
        {
            print("newFile.writeTextLine() returned with an error.\n");
        }
        print("* Write another text line\n");
        if( newFile.writeTextLine("Note that the first two text lines from that file are missing.\n\n") )
        {
            print("newFile.writeTextLine() returned with an error.\n");
        }
        print("* Write the whole remainder of the text file we have previously read in\n");
        if( newFile.writeText(text) )
        {
            print("newFile.writeText() returned with an error.\n");
        }
        newFile.close();
    }

    print( "* Creating binary file 'test.bin'. Writing a int, a float and a string.\n");
    file binFile = new file("test.bin", file::kWrite | file::kBinary);
    binFile.path = myFile.path;
    if( !binFile.open() )
    {
        binFile.putInt( 27 );
        binFile.putFloat( 3.141 );
        binFile.putString( "Hello world!" );
        binFile.close();
    }

    print( "* Trying to load data from 'test.bin'\n");
    int aInt = 0;
    float aFloat = 0;
    string aString = "";
    binFile.mode = file::kRead | file::kBinary;
    if( !binFile.open() )
    {
        aInt = binFile.getInt();
        aFloat = binFile.getFloat();
        aString = binFile.getString();
        binFile.close();
    }
    printf( "binFile.getInt() returns %d\n", aInt );
    printf( "binFile.getFloat() returns %g\n", aFloat );
    printf( "binFile.getString() returns %s\n", aString );

    print( "* Trying to rename 'test.bin' to 'hello.bin'\n");
    if( binFile.rename( "hello.bin" ) )
    {
        print("binFile.rename() returned an error.\n");
    }
    else
    {
        print("binFile.rename() succeeded.\n");
    }

    print("* Do you want to keep the files created? Y/N ");
    text = getString();

    if( text != "y" && text != "Y" )
    {
        print( "* Cleanup: Removing newFile and binFile\n");
        if( newFile.remove() )
            print( "newFile.remove() returned an error.\n");
        if( binFile.remove() )
            print( "binFile.remove() returned an error.\n");
    }

    return "Done.";
}
