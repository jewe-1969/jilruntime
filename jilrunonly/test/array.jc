/*
 *  arrayobj.jc
 *
 *  A little demonstration how to use the built-in array object.
 */

import stdlib;
using stdlib;   // get rid of stdlib namespace

/*
 *  function main
 *
 *  The type of data in an array is by default typeless, so you normally can't access
 *  any object members from an object in an array. This is because the compiler
 *  can't know there are Person instances in the array. Hence, writing:
 *
 *      array myArray;
 *      myArray[0] = new Person();
 *      myArray[0].Print();
 *
 *  will give you a compiler error message. However, there is a way around this
 *  restriction, by using the scope operator:
 *
 *      myArray[0].Person::Print();
 *
 *  This will tell the compiler to interprete the item in the array as an instance
 *  of class Person and call it's member function Print().
 *  Of course this would fail BADLY at runtime, if we would use this expression
 *  while there are no Person objects, but other data in the array!
 *
 *  Note that since v0.9, you can use type-safe arrays, which allow you to easily
 *  access members from objects:
 *
 *      Person[] myArray;
 *      myArray[0] = new Person();
 *      myArray[0].Print();
 */

class Person;

function string main(const string[] args)
{
    // create an empty address book
    Person[] AddressBook;

    // add some people to our address book
    AddressBook += new Person( "John",   "Small Street 476", new Date(22, 7, 1968) );
    AddressBook += new Person( "Annie",  "Broadway 75",      new Date(16, 2, 1975) );
    AddressBook += new Person( "Harold", "Village Road 12",  new Date(30, 10, 1961) );

    // print our address book
    PrintAddresses( AddressBook );

    // make a second addressbook, using an alternative method:
    Person[] addresses = {
        new Person( "Joshua", "Market Street 45",   new Date(7, 4, 1983) ),
        new Person( "Maria",  "5th Avenue",         new Date(4, 2, 1975) ),
        new Person( "Homer",  "Springfield Road 6", new Date(10, 12, 1963) )
    };

    // merge the new addresses with those from our address book and print result (this operation will return a new array)
    PrintAddresses( AddressBook.insert(addresses, 1) );

    // insert yet another address at the top of the list (again this will return a new array)
    Person rox = new Person( "Roxanne", "Red Lantern Boulevard 125", new Date(15, 8, 1981) );
    PrintAddresses( AddressBook.insertItem(rox, 0) );

    // or remove entry 1 from our address book (returns the result as a new array)
    PrintAddresses( AddressBook.remove(1, 1) );

    // or extract a sub array (again returns result as a new array)
    PrintAddresses( AddressBook.subArray(1, 4) );

    // or sort it by birthday (returns a new, sorted array)
    PrintAddresses( AddressBook.sort(Person::CompareBirthday) );

    // if we want to make all these changes permanently:
    AddressBook = AddressBook.insert(addresses, 1).insertItem(rox, 0).remove(1, 1).subArray(1, 4).sort(Person::CompareBirthday);
    PrintAddresses( AddressBook );

    return "";
}

/*
 *  function PrintAddresses
 *
 *  Print our addresses to console
 */

function PrintAddresses( const Person[] addresses )
{
    print("Addresses:\n");
    for( int i; i < addresses.length; i++ )
        addresses[i].Print();
    print("\n");
}

/*
 *  class Date
 *
 *  Simple class for storing a date
 */

class Date
{
    method Date(int d, int m, int y)
    {
        Day = d;
        Month = m;
        Year = y;
    }

    method const string convertor()
    {
        return (string) Month + "/" + Day + "/" + Year;
    }

    function int Compare(const var value1, const var value2)
    {
        Date d1 = value1;
        Date d2 = value2;
        if( d2.Year != d1.Year )
            return d2.Year - d1.Year;
        else if( d2.Month != d1.Month )
            return d2.Month - d1.Month;
        else
            return d2.Day - d1.Day;
    }

    // data
    int Day;
    int Month;
    int Year;
}

/*
 *  class person
 *
 *  Simple class describing a person
 */

class Person
{
    method Person(const string name, const string address, const Date birthday)
    {
        Name = name;
        Address = address;
        Birthday = birthday;
    }

    method Print()
    {
        print( "Name:     " + Name + "\n" );
        print( "Address:  " + Address + "\n" );
        print( "Birthday: " + Birthday + "\n\n" );
    }

    function int CompareBirthday(const var value1, const var value2)
    {
        Person p1 = value1;
        Person p2 = value2;
        return Date::Compare(p1.Birthday, p2.Birthday);
    }

    // data
    string Name;
    string Address;
    Date Birthday;
}
