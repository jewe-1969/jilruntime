//------------------------------------------------------------------------------
// File: JILMachine.h                                       (c) 2003 jewe.org
//------------------------------------------------------------------------------
//
// DISCLAIMER:
// -----------
//	THIS SOFTWARE IS SUBJECT TO THE LICENSE AGREEMENT FOUND IN "jilapi.h" AND
//	"COPYING". BY USING THIS SOFTWARE YOU IMPLICITLY DECLARE YOUR AGREEMENT TO
//	THE TERMS OF THIS LICENSE.
//
// Description: 
// ------------
/// @file jilmachine.h
/// The "kernel" of the virtual machine.
//------------------------------------------------------------------------------

#ifndef JILMACHINE_H
#define JILMACHINE_H

#include "jiltypes.h"
#include "jilsegment.h"

//------------------------------------------------------------------------------
// JILInitVM
//------------------------------------------------------------------------------
// Called automatically from CallMethod, when a JIL method has to be executed
// and the vm is not yet initialized. Initializes the virtual machine.
// The purpose of this function is mainly building the global object from the
// handles stored in the data segment.
// Note, that adding new data handles to the data segment will have no more
// effect, after the virtual machine is initialized.

JILError				JILInitVM				(JILState* pState);

//------------------------------------------------------------------------------
// JILRunInitCode
//------------------------------------------------------------------------------
// Incrementally executes the init-code generated by the compiler.

JILError				JILRunInitCode			(JILState* pState);

//------------------------------------------------------------------------------
// JILCallDelegate
//------------------------------------------------------------------------------
// Executes a function or method delegate written in script or native code.

JILError				JILCallDelegate			(JILState* pState, JILHandle* pDelegate);

//------------------------------------------------------------------------------
// JILCallCopyConstructor
//------------------------------------------------------------------------------
// Executes the copy constructor to initialize the given object, passing src
// into the constructor as source reference.

JILError				JILCallCopyConstructor	(JILState* pState, JILHandle* object, JILHandle* src);

//------------------------------------------------------------------------------
// JILTermVM
//------------------------------------------------------------------------------
// Called from Terminate. Does the "cleanup" after the ExecVM function returned.

JILError				JILTermVM				(JILState* pState);

//------------------------------------------------------------------------------
// JILGenerateException
//------------------------------------------------------------------------------
// This is called if the virtual machine generated an exception.
// If exception handler callbacks are present, these will be called to handle
// the exception. The return value is important here: If this method returns
// JIL_No_Exception, the VM will assume the exception has been properly handled
// and will continue execution.
// If the return value is different from JIL_No_Exception, the VM will abort
// execution and JILCallFunction() or JILCallMethod() will return the with the
// value this function has returned.

JILError				JILGenerateException	(JILState* pState, JILError e);

//------------------------------------------------------------------------------
// JILPushStackFrame
//------------------------------------------------------------------------------
// Prepares a new stack frame object for pushing it onto the stack.
// A stack frame object is used to enable nested, re-entrant calls from the
// native side to script functions.

JILStackFrame*			JILPushStackFrame		(JILState*, JILStackFrame*);

//------------------------------------------------------------------------------
// JILPopStackFrame
//------------------------------------------------------------------------------
// Prepares to pop a stack frame object from the stack.

JILStackFrame*			JILPopStackFrame		(JILState*, JILStackFrame*);

//------------------------------------------------------------------------------
// JILAllocContext
//------------------------------------------------------------------------------
// Allocates and initializes a new context. The number of arguments specify, how
// many handles from the stack of the current context will be moved to the
// stack of the new context. This is used to initialize the arguments of a
// cofunction. 'funcAddr' is the new program counter and should be set to the
// beginning of a cofunction.

JILContext*				JILAllocContext			(JILState* pState, JILLong numArgs, JILLong funcAddr);

//------------------------------------------------------------------------------
// JILFreeContext
//------------------------------------------------------------------------------
// Free a context.

void					JILFreeContext			(JILState* pState, JILContext* pContext);

//------------------------------------------------------------------------------
// JILMarkContext
//------------------------------------------------------------------------------
// Marks all handles used by the given context.

JILError				JILMarkContext			(JILState* pState, JILContext* pContext);

//------------------------------------------------------------------------------
// JILMarkDelegate
//------------------------------------------------------------------------------
// Marks all handles used by the given delegate / closure.

JILError				JILMarkDelegate			(JILState* pState, JILDelegate* pDelegate);

//------------------------------------------------------------------------------
// JILIsBaseType
//------------------------------------------------------------------------------
// Checks if 'base' is a super-class of 'type', or in other words, if 'type'
// directly or indirectly inherited 'base'.

JILBool					JILIsBaseType			(JILState* ps, JILLong base, JILLong type);

//------------------------------------------------------------------------------
// JILRTCheck
//------------------------------------------------------------------------------
// Perform a realtime type check. Checks if pObj is related to 'type'. If this
// function returns true, a type mismatch exception is thrown.

JILBool					JILRTCheck				(JILState* pState, JILLong type, JILHandle* pObj);

//------------------------------------------------------------------------------
// JILMarkDataHandles
//------------------------------------------------------------------------------
// Mark initialization constants ("data handles").

JILError				JILMarkDataHandles		(JILState* ps);

//------------------------------------------------------------------------------
// JILExceptionCallGetError
//------------------------------------------------------------------------------
// Calls the getError() method of an object implementing the exception interface
// and returns the error code.

JILError				JILExceptionCallGetError(JILState* ps, JILHandle* hException);

//------------------------------------------------------------------------------
// JILExceptionCallGetMessage
//------------------------------------------------------------------------------
// Calls the getMessage() method of an object implementing the exception
// interface and returns a string handle. The caller must free the string handle
// when it is no longer needed! If the function fails, NULL is returned.

JILHandle*				JILExceptionCallGetMessage(JILState* ps, JILHandle* hException);

//------------------------------------------------------------------------------
// JILCallFactory
//------------------------------------------------------------------------------
// Calls all constructors in an array of interface implementors.

JILError				JILCallFactory			(JILState* ps, JILArray* pArr, JILLong funcIndex);

//------------------------------------------------------------------------------
// JILDynamicConvert
//------------------------------------------------------------------------------
// Calls a convertor method of an object to dynamically convert a value.

JILError				JILDynamicConvert		(JILState* ps, JILLong dType, JILHandle* sObj, JILHandle** ppOut);

#endif	// #ifndef JILMACHINE_H
