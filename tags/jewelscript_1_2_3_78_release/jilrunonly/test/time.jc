/*
 *  time.jc
 *
 *  Testing the native time class.
 */

import stdlib;
import time;

using stdlib;   // get rid of stdlib namespace

/*
 *  function main
 */

function string main(const string[] args)
{
    time time1 = time::localTime();
    time time2 = time::currentTime();
    time1.tickDiff();   // measure time between two calls

    ShowTime( time1 );
    ShowTime( time2 );

    float diff = time::difference(time1, time2);
    print({ "Difference(time1, time2) = ", diff, "\n" });
    print({ "Current week is ", time1.dayOfYear / 7 + 1, "\n" });
    print( "\n" );

    print({ "time1 as float = ", time1.toFloat(), "\n" });
    print({ "time2 as float = ", time2.toFloat(), "\n" });
    print({ "time1 - time2  = ", time1.toFloat() - time2.toFloat(), "\n" });
    print( "\n" );

    time time3 = new time( time1.toFloat() );
    ShowTime( time3 );

    print("Wasting some time...\n");
    time1.isTick(0);    // start interval
    for( int i = 0; i < 10; i++ )
    {
        printf( "%d ", i );
        // wait until 500 milliseconds elapsed
        while( !time1.isTick(500) )
            /*do nothing*/;
    }
    print({ "\ntime::getTicks() returns = ", time::getTicks(), "\n" });
    print( "\n" );

    print({ "main() execution time ",time1.tickDiff()," milliseconds\n" });

    return "";
}

/*
 *  function ShowTime
 */

function ShowTime( time ti )
{
    string s = ti;    // time to string convertor
    print({ "ti (to string convertor) = ", s, "\n" });
    print({ "ti.format(\"%A, %d %B %Y\") = ", ti.format("%A, %d %B %Y"), "\n" });
    print({ "ti.second = ", ti.second, "\n" });
    print({ "ti.minute = ", ti.minute, "\n" });
    print({ "ti.hour = ", ti.hour, "\n" });
    print({ "ti.day = ", ti.day, "\n" });
    print({ "ti.month = ", ti.month, "\n" });
    print({ "ti.year = ", ti.year, "\n" });
    print({ "ti.dayOfWeek = ", ti.dayOfWeek, "\n" });
    print({ "ti.dayOfYear = ", ti.dayOfYear, "\n" });
    print( "\n" );
}
